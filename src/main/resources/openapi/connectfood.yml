openapi: 3.0.4
info:
  title: Restaurant Management System - ConnectFood
  description: |-
    API for user management (customers and restaurant owners) and login validation.
  version: 1.0.0

servers:
  - url: http://localhost:9090
    description: Development environment

tags:
  - name: Users
    description: Operations related to system users.
  - name: Authentication
    description: Operations related to the validation of access credentials.

security:
  - bearerAuth: []

paths:
  /v1/users:
    post:
      tags: [Users]
      summary: Register user.
      description: Creates a new user, ensuring email uniqueness and storing the password with a secure hash.
      operationId: createUser
      security: [{ bearerAuth: [] }]
      requestBody:
        description: Mandatory data for user creation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
            examples:
              valid:
                summary: Valid user creation
                value:
                  fullName: "Lucas Santos"
                  email: "lucas@example.com"
                  login: "lucas.santos"
                  password: "Secr3t@123"
                  roles: ["OWNER"]
                  addresses:
                    - street: "Av. Paulista"
                      number: "1000"
                      neighborhood: "Bela Vista"
                      city: "São Paulo"
                      state: "SP"
                      zipCode: "01310-100"
                      country: "Brasil"
              invalidEmail:
                summary: Invalid email (400)
                value:
                  fullName: "Lucas Santos"
                  email: "lucas@@example"
                  login: "lucas.santos"
                  password: "123"
                  roles: ["OWNER"]
                  addresses:
                    - street: "Av. Paulista"
                      number: "1000"
                      neighborhood: "Bela Vista"
                      city: "São Paulo"
                      state: "SP"
                      zipCode: "01310-100"
                      country: "Brasil"
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseOfUserResponse'
              example:
                success: true
                content:
                  uuid: "8f1b3b3a-9f2d-4e5e-9d2a-123456789abc"
                  fullName: "Lucas Santos"
                  email: "lucas@example.com"
                  login: "lucas.santos"
                  roles: ["OWNER"]
                  createdAt: "2025-10-20T12:00:00"
                  lastUpdateAt: "2025-10-20T12:00:00"
                  addresses:
                    - uuid: "d9f6a2e1-2b34-4c56-9a78-abcdef012345"
                      street: "Av. Paulista"
                      number: "1000"
                      neighborhood: "Bela Vista"
                      city: "São Paulo"
                      state: "SP"
                      zipCode: "01310-100"
                      country: "Brasil"
                      isDefault: true
                      createdAt: "2025-10-20T12:00:00"
                      lastUpdateAt: "2025-10-20T12:00:00"
        '400':
          description: Invalid input data.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/validation-error"
                title: "Bad Request"
                status: 400
                detail: "Validation failed for request."
                instance: "/v1/users"
                errors:
                  - field: "email"
                    message: "must be a well-formed email address"
                  - field: "password"
                    message: "size must be between 6 and 2147483647"
        '409':
          description: Email already registered in the system.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/duplicate-email"
                title: "Conflict"
                status: 409
                detail: "Email already exists: lucas@example.com"
                instance: "/v1/users"
                errors:
                  - field: "email"
                    message: "already in use"

    get:
      tags: [Users]
      summary: List and search users.
      description: Returns a paginated user list with optional filter by name (contains, case-insensitive).
      operationId: listUsers
      security: [{ bearerAuth: [] }]
      parameters:
        - name: name
          in: query
          description: Partial filter by user name (contains, case-insensitive).
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
      responses:
        '200':
          description: User list returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseOfUserResponse'
              examples:
                emptyPage:
                  summary: Empty page
                  value:
                    success: true
                    content: []
                    totalElements: 0
                    page: 0
                    size: 20
                someResults:
                  summary: With results
                  value:
                    success: true
                    content:
                      - uuid: "8f1b3b3a-9f2d-4e5e-9d2a-123456789abc"
                        fullName: "Lucas Santos"
                        email: "lucas@example.com"
                        login: "lucas.santos"
                        roles: ["OWNER"]
                        createdAt: "2025-10-20T12:00:00"
                        lastUpdateAt: "2025-10-21T09:30:00"
                        addresses: []
                    totalElements: 1
                    page: 0
                    size: 20
        '400':
          description: Invalid filter parameter.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/invalid-parameter"
                title: "Bad Request"
                status: 400
                detail: "Parameter 'size' must be >= 1"
                instance: "/v1/users?size=0"

  /v1/users/{uuid}:
    get:
      tags: [Users]
      summary: Get user by UUID.
      description: Returns data for an existing user by its identifier.
      operationId: getUserByUuid
      security: [{ bearerAuth: [] }]
      parameters:
        - name: uuid
          in: path
          description: Unique user identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseOfUserResponse'
              example:
                success: true
                content:
                  uuid: "8f1b3b3a-9f2d-4e5e-9d2a-123456789abc"
                  fullName: "Lucas Santos"
                  email: "lucas@example.com"
                  login: "lucas.santos"
                  roles: ["OWNER"]
                  createdAt: "2025-10-20T12:00:00"
                  lastUpdateAt: "2025-10-21T09:30:00"
                  addresses: []
        '404':
          description: User not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/user-not-found"
                title: "Not Found"
                status: 404
                detail: "User not found for uuid=8f1b3b3a-9f2d-4e5e-9d2a-000000000000"
                instance: "/v1/users/8f1b3b3a-9f2d-4e5e-9d2a-000000000000"

    put:
      tags: [Users]
      summary: Update user data.
      description: Updates user registration data (password not changed in this endpoint).
      operationId: updateUser
      security: [{ bearerAuth: [] }]
      parameters:
        - name: uuid
          in: path
          description: Unique user identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Fields allowed to be updated (e.g., name, email, login, roles and addresses).
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
            examples:
              updateNameAndAddress:
                summary: Update name and address list
                value:
                  fullName: "Lucas S. Mumbarra"
                  addresses:
                    - street: "Rua das Flores"
                      number: "200"
                      neighborhood: "Centro"
                      city: "Cajamar"
                      state: "SP"
                      zipCode: "07700-000"
                      country: "Brasil"
                      isDefault: true
              invalidEmail:
                summary: Invalid email (400)
                value:
                  email: "invalid@@mail"
      responses:
        '200':
          description: User data updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseOfUserResponse'
              example:
                success: true
                content:
                  uuid: "8f1b3b3a-9f2d-4e5e-9d2a-123456789abc"
                  fullName: "Lucas S. Mumbarra"
                  email: "lucas@example.com"
                  login: "lucas.santos"
                  roles: ["OWNER"]
                  createdAt: "2025-10-20T12:00:00"
                  lastUpdateAt: "2025-10-22T10:00:00"
                  addresses:
                    - uuid: "d9f6a2e1-2b34-4c56-9a78-abcdef012345"
                      street: "Rua das Flores"
                      number: "200"
                      neighborhood: "Centro"
                      city: "Cajamar"
                      state: "SP"
                      zipCode: "07700-000"
                      country: "Brasil"
                      isDefault: true
                      createdAt: "2025-10-20T12:00:00"
                      lastUpdateAt: "2025-10-22T10:00:00"
        '400':
          description: Invalid input data.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/validation-error"
                title: "Bad Request"
                status: 400
                detail: "Validation failed for request."
                instance: "/v1/users/8f1b3b3a-..."
                errors:
                  - field: "email"
                    message: "must be a well-formed email address"
        '409':
          description: Email already exists.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/duplicate-email"
                title: "Conflict"
                status: 409
                detail: "Email already exists: lucas@example.com"
                instance: "/v1/users/8f1b3b3a-..."
                errors:
                  - field: "email"
                    message: "already in use"
        '404':
          description: User not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/user-not-found"
                title: "Not Found"
                status: 404
                detail: "User not found for uuid=8f1b3b3a-..."
                instance: "/v1/users/8f1b3b3a-..."

    delete:
      tags: [Users]
      summary: Delete user.
      description: Permanently removes a user by its UUID.
      operationId: deleteUser
      security: [{ bearerAuth: [] }]
      parameters:
        - name: uuid
          in: path
          description: Unique user identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully. No content is returned.
        '404':
          description: User not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/user-not-found"
                title: "Not Found"
                status: 404
                detail: "User not found for uuid=8f1b3b3a-..."
                instance: "/v1/users/8f1b3b3a-..."
        '409':
          description: Deletion not allowed due to existing constraints (e.g., linked resources).
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/delete-conflict"
                title: "Conflict"
                status: 409
                detail: "User cannot be deleted due to existing constraints."
                instance: "/v1/users/8f1b3b3a-..."

  /v1/users/{uuid}/password:
    patch:
      tags: [Users]
      summary: Change user password.
      description: Changes the user's password after validating the current password provided.
      operationId: changePassword
      security: [{ bearerAuth: [] }]
      parameters:
        - name: uuid
          in: path
          description: Unique user identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Current password and new password to complete the change.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              valid:
                summary: Valid change
                value:
                  currentPassword: "123456"
                  newPassword: "N0vaSenha@123"
              wrongCurrent:
                summary: Wrong current password (401)
                value:
                  currentPassword: "errada"
                  newPassword: "N0vaSenha@123"
      responses:
        '204':
          description: Password changed successfully.
        '401':
          description: Current password is incorrect.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/wrong-password"
                title: "Unauthorized"
                status: 401
                detail: "Current password is incorrect."
                instance: "/v1/users/8f1b3b3a-.../password"
        '404':
          description: User not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/user-not-found"
                title: "Not Found"
                status: 404
                detail: "User not found for uuid=8f1b3b3a-..."
                instance: "/v1/users/8f1b3b3a-.../password"

  /v1/auth/login:
    post:
      tags: [Authentication]
      summary: Validate access credentials and return JWT token.
      description: Validates user credentials (email or login + password) and issues a JWT token upon success.
      operationId: login
      security: []
      requestBody:
        description: Default credentials for professor test user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginValidationRequest'
            example:
              login: "professor.fiap@qa.exemplo.com"
              password: "123456"
      responses:
        '200':
          description: Valid credentials; returns JWT token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponseOfJwtTokenResponse'
              example:
                success: true
                content:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  tokenType: "Bearer"
                  expiresIn: 3600
        '401':
          description: Invalid credentials.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: "https://connectfood.dev/problems/invalid-credentials"
                title: "Unauthorized"
                status: 401
                detail: "Invalid login or password."
                instance: "/v1/auth/login"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRole:
      type: string
      description: Role that the user plays in the system.
      enum: [CUSTOMER, OWNER]

    AddressResponse:
      type: object
      description: Address linked to the user.
      properties:
        uuid:
          type: string
          description: Stable public identifier of the address.
        street:
          type: string
          maxLength: 140
        number:
          type: string
          maxLength: 20
        complement:
          type: string
          maxLength: 80
        neighborhood:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 80
        state:
          type: string
          maxLength: 2
        zipCode:
          type: string
          maxLength: 12
          description: Brazilian postal code (CEP).
        country:
          type: string
          maxLength: 60
        addressType:
          type: string
          maxLength: 20
          description: Human-readable address type (e.g., HOME, WORK).
        isDefault:
          type: boolean
          description: Indicates whether this address is the default one.
        createdAt:
          type: string
          format: date-time
          description: LocalDateTime (no timezone).
        lastUpdateAt:
          type: string
          format: date-time
          description: LocalDateTime (no timezone).

    AddressCreateRequest:
      type: object
      description: Address payload required when creating a user.
      required: [street, number, neighborhood, city, state, zipCode, country]
      properties:
        street:
          type: string
          maxLength: 140
        number:
          type: string
          maxLength: 20
        complement:
          type: string
          maxLength: 80
        neighborhood:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 80
        state:
          type: string
          maxLength: 2
          description: Two-letter state code.
        zipCode:
          type: string
          maxLength: 12
          description: Brazilian postal code (CEP).
          pattern: '^\d{5}-?\d{3}$'
        country:
          type: string
          maxLength: 60
        addressType:
          type: string
          maxLength: 20
          description: Human-readable address type (e.g., HOME, WORK).
        isDefault:
          type: boolean
          description: Indicates whether this address is the default one.
      example:
        street: "Rua das Flores"
        number: "200"
        complement: "Ap 21"
        neighborhood: "Centro"
        city: "Cajamar"
        state: "SP"
        zipCode: "07700-000"
        country: "Brasil"
        isDefault: true

    AddressUpsertRequest:
      type: object
      description: Address payload for create/update operations (upsert) when updating a user.
      properties:
        street:
          type: string
          maxLength: 140
        number:
          type: string
          maxLength: 20
        complement:
          type: string
          maxLength: 80
        neighborhood:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 80
        state:
          type: string
          maxLength: 2
          description: Two-letter state code.
        zipCode:
          type: string
          maxLength: 12
          description: Brazilian postal code (CEP).
          pattern: '^\d{5}-?\d{3}$'
        country:
          type: string
          maxLength: 60
        addressType:
          type: string
          maxLength: 20
          description: Human-readable address type (e.g., HOME, WORK).
        isDefault:
          type: boolean
          description: Indicates whether this address is the default one.

    UserResponse:
      type: object
      description: Public representation of the user returned by query and update endpoints.
      properties:
        uuid:
          type: string
          description: Stable public identifier of the user.
        fullName:
          type: string
          minLength: 3
          maxLength: 120
        email:
          type: string
          format: email
          maxLength: 255
        login:
          type: string
          maxLength: 60
        roles:
          type: array
          description: List of roles (each item should be CUSTOMER or OWNER).
          items:
            type: string
        createdAt:
          type: string
          format: date-time
          description: LocalDateTime (no timezone).
        lastUpdateAt:
          type: string
          format: date-time
          description: LocalDateTime (no timezone).
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressResponse'
      example:
        uuid: "8f1b3b3a-9f2d-4e5e-9d2a-123456789abc"
        fullName: "Lucas Santos"
        email: "lucas@example.com"
        login: "lucas.santos"
        roles: ["OWNER"]
        createdAt: "2025-10-20T12:00:00"
        lastUpdateAt: "2025-10-21T09:30:00"
        addresses:
          - uuid: "d9f6a2e1-2b34-4c56-9a78-abcdef012345"
            street: "Av. Paulista"
            number: "1000"
            neighborhood: "Bela Vista"
            city: "São Paulo"
            state: "SP"
            zipCode: "01310-100"
            country: "Brasil"
            isDefault: true
            createdAt: "2025-10-20T12:00:00"
            lastUpdateAt: "2025-10-21T09:30:00"

    UserCreateRequest:
      type: object
      description: Data structure required to create a new user.
      required: [fullName, email, login, password, roles, addresses]
      properties:
        fullName:
          type: string
          minLength: 3
          maxLength: 120
        email:
          type: string
          format: email
          maxLength: 255
        login:
          type: string
          maxLength: 60
        password:
          type: string
          minLength: 6
          description: Plain text (stored as hash).
        roles:
          type: array
          minItems: 1
          description: List of roles (each item should be CUSTOMER or OWNER).
          items:
            type: string
        addresses:
          type: array
          minItems: 1
          description: At least one address is required on user creation.
          items:
            $ref: '#/components/schemas/AddressCreateRequest'

    UserUpdateRequest:
      type: object
      description: Data structure allowed for updating user registration (except password).
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        login:
          type: string
        roles:
          type: array
          description: List of roles (each item should be CUSTOMER or OWNER).
          items:
            type: string
        addresses:
          type: array
          description: Full upsert list; provide desired final state (create/update/remove by omission).
          items:
            $ref: '#/components/schemas/AddressUpsertRequest'

    ChangePasswordRequest:
      type: object
      description: Payload to change user's password.
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
          minLength: 6
        newPassword:
          type: string
          minLength: 6

    LoginValidationRequest:
      type: object
      description: Data structure for validating access credentials.
      required: [login, password]
      properties:
        login:
          type: string
          description: User's login or registered email address.
        password:
          type: string

    JwtTokenResponse:
      type: object
      description: Response containing the JWT access token and optional expiration time.
      properties:
        accessToken:
          type: string
          description: Signed JWT token used for authenticated requests.
        tokenType:
          type: string
          example: Bearer
        expiresIn:
          type: integer
          format: int64
          description: Token expiration time in seconds.
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType: "Bearer"
        expiresIn: 3600

    ProblemDetails:
      type: object
      description: Standardized error structure according to Problem Details (RFC 7807).
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    BaseResponseOfUserResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        content:
          $ref: '#/components/schemas/UserResponse'

    BaseResponseOfJwtTokenResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        content:
          $ref: '#/components/schemas/JwtTokenResponse'

    PageResponseOfUserResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        totalElements:
          type: integer
          format: int64
        page:
          type: integer
        size:
          type: integer
